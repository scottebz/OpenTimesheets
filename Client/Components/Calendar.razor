@inject ITimesheetRepository repository
@inject AppState AppState  
@using OpenTimesheets.Shared;
@implements IDisposable;

<h4>DateSelection</h4>

@if (myModel.CalDays == null)
{
    <div><p>Loading...</p></div>
}
else
{
    <div class="container-fluid">
        <!-- Month Title and arrows -->
        <div class=row>
            <div class="col-2">
                <div @onclick="MonthClickLeft" class="change-month d-flex flex-row justify-content-start"><i class="bi-arrow-left-square"></i></div>
            </div>
            <div class="col-8">
                <div class="month-name d-flex flex-row justify-content-center">@myModel.CalDays.Skip(8).First().CalDay.Date.ToString("MMMM yyyy")</div><!-- WRONG.  Dont use First.  Use eighth-->
            </div>
            <div class="col-2">
                <div @onclick="MonthClickRight" class="change-month d-flex flex-row justify-content-end"><i class="bi-arrow-right-square"></i></div>
            </div>
        </div>
    </div>

    <div class="container-fluid text-center clear-sides">
        <!-- First Row Days of Week -->
        <div class="row">
            @for (int i = 1; i <= 7; i++)
            {
                DateTime da = new DateTime(2021, 2, i); //a month where 1st is a monday
                <div class="col day-cell day-head">
                    <div class="d-flex flex-row justify-content-center">
                     @da.ToString("ddd")
                    </div>
                </div>
            }
        </div>
    </div>


    <div class="container-fluid text-center clear-sides cal-container">

        @for(int cx = 0; cx <= myModel.CalDays.Count; cx+=7)
        {
            int endWeek = cx + 7;
            if(cx >= myModel.CalDays.Count)
            {
                break;
            }
            string mondayOfWeek = myModel.CalDays[cx].CalDay.ToString("yyyy-MM-dd");
            string WeekSelectedClass = "";
            if(AppState.SelectedCalendarWeek == mondayOfWeek)
            {
                WeekSelectedClass = "week-selected";
            }
        <div class="row week @WeekSelectedClass" @onclick="@(() => CalRowClicked(mondayOfWeek))">
            @for (int i = cx; i < endWeek; i++)
            {
                try
                {
                    var calDay = myModel.CalDays[i];
                    //Console.WriteLine(calDay.CalDay.DayOfWeek.ToString());
                    string dayStyle = "";
                    string isToday = "";
                    if (calDay.CalDay.IsBetween(DisplayMonth.FirstDayOfTheMonth(), DisplayMonth.LastDayOfTheMonth()))
                    {
                        dayStyle = "";
                    }
                    else
                    {
                        dayStyle = "day-cell-non-current";
                    }
                    if (calDay.CalDay.IsToday())
                    {
                        isToday = "day-istoday";
                    }
                    else
                    {
                        isToday = "";
                    }

                    <div class="col day-cell @dayStyle" @onclick="InvokeParent">
                        <div class="d-flex flex-row justify-content-end day-of-month">
                            <div class="@isToday">@calDay.CalDay.ToString("dd")</div>
                        </div>
                        <div class="d-flex flex-row day-dollar">
                            <div class=""> <i class="bi-tools"></i> @calDay.HrsAllocated.ToString()</div>
                        </div>
                        <div class="d-flex flex-row day-clock">
                            <div class=""> <i class="bi-clock"></i> @calDay.HrsWorked.ToString()</div>
                        </div>
                    </div>
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    //Console.WriteLine(ex.ToString());
                    break;
                }

            }
        </div>
        }
     </div>




}


@code {
    [Parameter] public Action ParentMethod { get; set; }
    //https://www.pragimtech.com/blog/blazor/blazor-data-binding/
    //https://blazor-university.com/templating-components-with-renderfragements/
    //https://www.yogihosting.com/blazor-lifecycle/
    //https://docs.microsoft.com/en-us/dotnet/architecture/blazor-for-web-forms-developers/components
    //https://github.com/aspnet/Mvc/issues/3944
    //https://stackoverflow.com/questions/12014253/razor-missing-matching-closing-tag

    //https://blog.jeremylikness.com/blog/2019-01-03_from-angular-to-blazor-the-health-app/  (cool way to handle event changes/notifications
    //https://jonhilton.net/blazor-state-management/
    //https://www.youtube.com/watch?v=GIupo55GTro

    //[Parameter] public EventCallback<string> OnDateClicked { get; set; }

    //holds a date within the desired display month on screen.
    //used to determine whether a date is within (or outside) the bounds of the desired display month
    public DateTime DisplayMonth;

    private CalendarModel myModel = new CalendarModel();
    class CalendarModel
    {
        public List<CalDayData> CalDays { get; set; }
    }

    private void WriteLog(string s)
    {
        Console.WriteLine(s);
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);

    }

    void CalRowClicked(string MondayOfWeek)
    {
        //Console.WriteLine(MondayOfWeek + " row clicked.");
        AppState.UpdateSelectedCalendarWeek(this, MondayOfWeek);
    }

    private async Task AppState_StateChanged(ComponentBase Source, String Property)
    {
        if(Source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);

        //await Task.Delay(2000);

        //displayWeek = repository.GetWorkWeek("GordonFreeman", DateTime.Now);

        DisplayMonth = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
        Console.WriteLine("DisplayMonth: " + DisplayMonth.ToString("MMMM"));
        List<CalDayData> calDays = repository.GetCalendarViewData("GordonF", DisplayMonth);
        myModel.CalDays = calDays;

        /*
        foreach(CalDayData calDay in calDays)
        {
            Console.WriteLine(calDay.ToString());
        }
        */

        //this.StateHasChanged();
    }

    void MonthClickLeft()
    {
        DisplayMonth = DisplayMonth.AddMonths(-1);
        AppState.UpdateCalDisplayMonth(this, DisplayMonth);
        List<CalDayData> calDays = repository.GetCalendarViewData("GordonF", DisplayMonth);
        myModel.CalDays = calDays;
    }
    void MonthClickRight()
    {
        DisplayMonth = DisplayMonth.AddMonths(1);
        AppState.UpdateCalDisplayMonth(this, DisplayMonth);
        List<CalDayData> calDays = repository.GetCalendarViewData("GordonF", DisplayMonth);
        myModel.CalDays = calDays;
    }

    /*

    private DateModel ChosenDate = new DateModel();

    class DateModel
    {
        public DateTime? dte { get; set; }
        public override string ToString()
        {
            if (dte.HasValue)
            {
                return dte.Value.ToString("yyyy-MM-dd");
            }
            else
            {
                return "";
            }
        }
    }
    */

    private void InvokeParent()
    {
        //Console.WriteLine("Invoking Parent...");
        //ParentMethod?.Invoke();
    }





    /*
    private Task DateClicked(EventArgs e)
    {
        Console.WriteLine("DateClicked....");
        //return OnDateClicked.InvokeAsync(ChosenDate.dte);
        //return OnDateClicked.InvokeAsync(ChosenDate.dte.ToString());


    }


<!--
<EditForm Model="@ChosenDate">
    <InputDate @bind-Value="@ChosenDate.dte" @onselectionchange="@InvokeParent" />
    <button class="btn btn-primary" @onclick="@InvokeParent">OK</button>
</EditForm>

<p>@ChosenDate.ToString()</p>
    -->


    */


    


}
