@inject ITimesheetRepository repository
@inject AppState AppState
@using OpenTimesheets.Shared;
@using System.Globalization;
@implements IDisposable;
@inject NavigationManager navManager

<div class="table-responsive-sm">
    <table class="table table-bordered table-sm small">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Date</th>
                <th scope="col">Start</th>
                <th scope="col">Finish</th>
                <th scope="col">Break</th>
                <th scope="col">Hrs</th>
                <th scope="col">Other</th>
            </tr>
        </thead>
        <tbody>

            @if (displayWeek == null)
            {
                <div><p>Loading...</p></div>
            }
            else
            {
                @foreach (WorkShift ws in displayWeek)
                {
                    @if (ws == null)
                    {
                        <tr class="clickable">
                            <td class="small">Need date</td>
                            <td>0</td>
                            <td>0</td>
                            <td>0</td>
                            <td>0</td>
                            <td>....</td>
                        </tr>
                    }
                    else
                    {
                        <tr class="clickable"  @onclick="@(() => EditShift(ws))">
                            <td class="small">@ws.ShiftDate.ToString("ddd dd/MM")</td>
                            <td>@ws.ShiftStart.ToString("HH:mm tt")</td>
                            <td>@ws.ShiftEnd.ToString("HH:mm tt")</td>
                            <td>@ws.HrsBreak.ToString("0.00")</td>
                            <td>@ws.HrsNorm.ToString("0.00")</td>
                            <td>....</td>
                        </tr>
                    }

                }
            }

        </tbody>
    </table>
</div>


@code{
    [Parameter] public DateTime DateOfWeek { get; set; }

    public WorkWeek displayWeek;

    private void EditShift(WorkShift ws)
    {
        AppState.UpdatedSelectedWorkShift(this, ws);
        navManager.NavigateTo("/WorkShift");
    }

    protected async override Task OnInitializedAsync()
    {
        AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
        Console.WriteLine("WeekGrid. OninitAsync...");


    }


    private async Task AppState_StateChanged(ComponentBase Source, String Property)
    {
        if (Source != this)
        {
            Console.WriteLine("AppStateChanged: " + Property);

            if (Property == "SelectedCalendarWeek")
            {
                string calWeek = AppState.SelectedCalendarWeek;
                try
                {
                    DateTime dte = DateTime.ParseExact(calWeek, "yyyy-MM-dd", CultureInfo.InvariantCulture);
                    displayWeek = repository.GetWorkWeek("GordonFreeman", dte);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                }

                await InvokeAsync(StateHasChanged);
            }

        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);

    }

}
