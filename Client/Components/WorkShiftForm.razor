@inject ITimesheetRepository repository
@inject AppState AppState
@using OpenTimesheets.Shared;
@using System.Globalization;
@implements IDisposable;
@inject NavigationManager navManager
@page "/WorkShift"

<h3>WorkShiftForm</h3>

@if (workShiftModel == null)
{
    <div><p>Loading...</p></div>
}
else
{
    <EditForm Model="workShiftModel" OnValidSubmit="SaveShift">
        <DataAnnotationsValidator/>
        <div class="form-group">
            <label>Start:</label>
            <div>
                <input type="time" class="form-control time-control" required @bind="workShiftModel.ShiftStart" @bind:format="HH:mm" />
                <ValidationMessage For="@workShiftModel.ShiftStart"/>
            </div>

            <label>End:</label>
            <div>
                <input type="time" class="form-control time-control" required @bind="workShiftModel.ShiftEnd" @bind:format="HH:mm" />
            </div>

            <button class="btn btn-success" type="submit">Save</button>

        </div>

    </EditForm>
}



@code {
    private WorkShift workShiftModel;

    private void SaveShift()
    {

    }

    protected async override Task OnInitializedAsync()
    {
        AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);

    }

    private async Task AppState_StateChanged(ComponentBase Source, String Property)
    {
        if (Source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);

    }

}
