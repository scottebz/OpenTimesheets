@inject ITimesheetRepository repository
@inject AppState AppState
@using OpenTimesheets.Shared;
@using System.Globalization;
@implements IDisposable;
@inject NavigationManager navManager

@page "/WorkShift"

<h3></h3>

@if (workShiftModel == null)
{
    <div><p>Loading...</p></div>
}
else
{
<h4>@workShiftModel.ShiftDate.ToString("ddd dd MMM")</h4>

<EditForm Model="workShiftModel" OnValidSubmit="SaveShift">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="inputShiftStart" class="col-sm-2 col-form-label">Start</label>
        <div class="col-sm-10">
            <input type="time" id="inputShiftStart" class="form-control time-control" required @bind="@workShiftModel.ShiftStart" />
        </div>
    </div>
    <div class="form-group row">
        <label for="inputShiftEnd" class="col-sm-2 col-form-label">End</label>
        <div class="col-sm-10">
            <input type="time" id="inputShiftEnd" class="form-control time-control" required @bind="@workShiftModel.ShiftEnd" />
        </div>
    </div>
    <div class="form-group row">
        <label for="inputBreak" class="col-sm-2 col-form-label">Break</label>
        <div class="col-sm-10">
            <input type="number" id="inputShiftEnd" min="0" pattern="^\d*(\.\d{0,2})?$" step="0.1" class="form-control time-control" required @bind="@workShiftModel.HrsBreak" />
        </div>
    </div>
    <button class="btn btn-success" type="submit">Save</button>
</EditForm>
}



@code {
    private WorkShift workShiftModel;

    /*
    private TimeSpan _ts1 = TimeSpan.FromHours(0);
    private string ShiftStartTimeProxy
    {
        get => workShiftModel.ShiftStart.ToString();
        set => TimeSpan.TryParse(value, out _ts1);
    }
    */

    void ValidFormSubmitted(EditContext editContext)
    {


    }

    private async Task SaveShift()
    {
        Console.WriteLine("Shift saved");
        Console.WriteLine(workShiftModel.ToString());
        WorkShift newWs = new WorkShift();
        newWs.ShiftDate = workShiftModel.ShiftDate;
        newWs.ShiftStart = workShiftModel.ShiftStart;
        newWs.ShiftEnd = workShiftModel.ShiftEnd;
        newWs.HrsBreak = workShiftModel.HrsBreak;
        newWs.Username = workShiftModel.Username;
        newWs.HrsElapsed = (decimal) newWs.ShiftEnd.Subtract(newWs.ShiftStart).TotalHours;
        newWs.HrsNorm = newWs.HrsElapsed - newWs.HrsBreak;

        try
        {
            await repository.CreateWorkShift(newWs);
            navManager.NavigateTo("/basicuserpage");

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }


    protected async override Task OnInitializedAsync()
    {
        AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);

        workShiftModel = AppState.SelectedWorkShift;

    }

    private async Task AppState_StateChanged(ComponentBase Source, String Property)
    {
        if (Source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);

    }


    /*

    //@inject IWorkShiftRepository workShiftRepository

                <label>End:</label>
            <div>
                <input type="time" class="form-control time-control" required @bind="workShiftModel.ShiftEnd" @bind:format="HH:mm" />
            </div>*/

}


